// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5293;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc5293.autoncommands.AutonDrive;
import org.usfirst.frc5293.commands.AutonomousCommand;
import org.usfirst.frc5293.commands.CollectTote;
import org.usfirst.frc5293.commands.MecanumDrive;
import org.usfirst.frc5293.util.Util;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    private final Joystick joystick1;
    private final Joystick joystick2;

//    private final JoystickButton toteUpButton;
//    private final JoystickButton toteDownButton;

    private static final int TOTE_UP_BUTTON = 11;
    private static final int TOTE_DOWN_BUTTON = 10;

    public static interface LimitFunction {
        void run(double percentage);
    }

    private static class StopToteElevator extends Command {
        @Override
        protected void initialize() {
            requires(Robot.toteElevator);
        }

        @Override
        protected void execute() {
            Robot.toteElevator.stop();
        }

        @Override
        protected boolean isFinished() {
            return false;
        }

        @Override
        protected void end() {
        }

        @Override
        protected void interrupted() {
        }
    }

    private static class EaseIn extends Command {
        private static final long EASE_IN_DURATION_MS = 750;

        private long startMs = 0;
        private long durationMs = 0;

        private LimitFunction func;

        public EaseIn(LimitFunction func) {
            this.func = func;

            // TODO: Figure how to refactor this out
            requires(Robot.toteElevator);
        }

        @Override
        protected void initialize() {
            startMs = System.currentTimeMillis();
        }

        @Override
        protected void execute() {
            durationMs = System.currentTimeMillis() - startMs;

            double percentage = Util.easeInQuad(durationMs, 0.0, 0.2, EASE_IN_DURATION_MS);
            percentage = Util.clampMax(percentage, 1.0);
            func.run(percentage);
        }

        @Override
        protected boolean isFinished() {
            return false;
        }

        @Override
        protected void end() { }

        @Override
        protected void interrupted() {  }
    }

    public OI() {
        joystick1 = new Joystick(0);
        joystick2 = new Joystick(1);

//        toteUpButton = new JoystickButton(joystick1, TOTE_UP_BUTTON);
//        toteUpButton.whenPressed(new EaseIn(Robot.toteElevator::raise));
//        toteUpButton.whenReleased(new StopToteElevator());
//
//        toteDownButton = new JoystickButton(joystick1, TOTE_DOWN_BUTTON);
//        toteDownButton.whenPressed(new EaseIn(Robot.toteElevator::lower));
//        toteDownButton.whenReleased(new StopToteElevator());

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("Collect Tote", new CollectTote());

        SmartDashboard.putData("Mecanum Drive", new MecanumDrive());

        SmartDashboard.putData("Auton Drive", new AutonDrive());
    }

    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }
}

